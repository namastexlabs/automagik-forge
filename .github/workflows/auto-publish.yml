name: Auto-Publish to NPM

on:
  release:
    types: [published]

permissions:
  contents: read
  packages: write

env:
  NODE_VERSION: 22
  PNPM_VERSION: 10.12.4
  RUST_TOOLCHAIN: nightly-2025-05-18

jobs:
  auto-publish:
    runs-on: ubuntu-latest
    # Only run for stable releases (not pre-releases)
    if: github.event.release.prerelease == false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name }}

      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup-node

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          components: rustfmt, clippy

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: backend

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Configure NPM authentication
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Check version format
        id: version-check
        run: |
          VERSION="${{ github.event.release.tag_name }}"
          VERSION_NO_V="${VERSION#v}"
          
          echo "Release version: $VERSION_NO_V"
          
          # Check if this is a stable version (x.y.z format, not x.y.z.w)
          if [[ "$VERSION_NO_V" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "✅ Stable version detected: $VERSION_NO_V"
            echo "is_stable=true" >> $GITHUB_OUTPUT
            echo "version=$VERSION_NO_V" >> $GITHUB_OUTPUT
          else
            echo "⚠️ Pre-release version detected: $VERSION_NO_V - skipping auto-publish"
            echo "is_stable=false" >> $GITHUB_OUTPUT
            exit 0
          fi

      - name: Build and publish to NPM
        if: steps.version-check.outputs.is_stable == 'true'
        run: |
          echo "🚀 Building and publishing stable version ${{ steps.version-check.outputs.version }}"
          make publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Update release with publish status
        if: steps.version-check.outputs.is_stable == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: release } = await github.rest.repos.getRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: context.payload.release.id
            });

            const currentBody = release.body || '';
            const publishedNote = '\n\n✅ **Published to NPM Registry**\n\n```bash\nnpx automagik-forge\n```';
            
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: context.payload.release.id,
              body: currentBody + publishedNote
            });

  # Separate job for pre-release versions (publish with beta tag)
  auto-publish-prerelease:
    runs-on: ubuntu-latest
    # Only run for pre-releases
    if: github.event.release.prerelease == true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name }}

      - name: Setup Node.js and pnpm
        uses: ./.github/actions/setup-node

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          components: rustfmt, clippy

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: backend

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Configure NPM authentication
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Build and publish pre-release to NPM
        run: |
          VERSION="${{ github.event.release.tag_name }}"
          VERSION_NO_V="${VERSION#v}"
          echo "🚀 Building and publishing pre-release version $VERSION_NO_V with beta tag"
          make publish-prerelease
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Update release with publish status
        uses: actions/github-script@v7
        with:
          script: |
            const { data: release } = await github.rest.repos.getRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: context.payload.release.id
            });

            const currentBody = release.body || '';
            const version = '${{ github.event.release.tag_name }}'.replace('v', '');
            const publishedNote = `\n\n✅ **Published to NPM Registry (Beta)**\n\n\`\`\`bash\n# Test this pre-release:\nnpx automagik-forge@beta\n# Or specific version:\nnpx automagik-forge@${version}\n\`\`\``;
            
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: context.payload.release.id,
              body: currentBody + publishedNote
            });